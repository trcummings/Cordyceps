{"version":3,"sources":["webpack:///webpack/bootstrap cbc2e040c215eab1fc15","webpack:///./lib/cordycepsGame.js","webpack:///./lib/player.js","webpack:///./lib/camera.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAI;;AAEJ;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA,IAAG;;AAEH;AACA;AACA,kBAAiB,SAAS;AAC1B;AACA;AACA;AACA,eAAc,uBAAuB;AACrC,eAAc,uBAAuB;AACrC,eAAc;AACd,MAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,oBAAmB,qBAAqB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH,EAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN,KAAI;AACJ;AACA;AACA,iBAAgB,eAAe;AAC/B,iBAAgB,eAAe;AAC/B,iBAAgB,eAAe;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,mBAAkB,eAAe;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB,eAAe;AAC/B,iBAAgB,eAAe;AAC/B,iBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,KAAI;AACJ;AACA;AACA,KAAI;AACJ;AACA;AACA;AACA,mBAAkB,SAAS;AAC3B;AACA;AACA;AACA,gBAAe,uBAAuB;AACtC,gBAAe,uBAAuB;AACtC,gBAAe;AACfqBAAoB,qBAAqB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAI;;;;;;;ACpYJ;AACA,gBAAe;AACf,gBAAe;AACf,gBAAe;AACf;;AAEA;;AAEA;;AAEA;;;;;;;ACVA;AACA,gBAAe,cAAc;AAC7B,gBAAe,cAAc;AAC7B,gBAAe,cAAc;AAC7B;AACA;AACA;AACA;AACA,+BAA8B;AAC9B;AACA;AACA,kBAAiB;AACjB;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA","file":"./lib/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap cbc2e040c215eab1fc15\n **/","// var Game = require(\"./game\");\n// var GameView = require(\"./gameView\");\n//\n// document.addEventListener(\"DOMContentLoaded\", function(){\n//   var canvasEl = document.getElementById(\"canvas\");\n//   canvasEl.width = Game.DIM_X;\n//   canvasEl.height = Game.DIM_Y;\n//\n//   var context = canvasEl.getContext(\"2d\");\n//   var game = new Game(context);\n//   new GameView(game, context).start();\n// });\n\nvar Player = require('./player.js');\nvar Camera = require('./camera.js');\n\nvar player = new Player();\nvar camera = new Camera(document.body.clientHeight, document.body.clientWidth);\n\nvar canvas = document.getElementById(\"canvas\");\n\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n  var context = canvas.getContext('2d');\n\n\n  // starting to render\n  canvas.width = document.body.clientWidth;\n  canvas.height = document.body.clientHeight;\n\n  // draw available canvas background\n  function clearBlack() {\n    context.beginPath();\n    if (camera.height < canvas.height) {\n      context.fillStyle = \"white\";\n      context.fillRect(0, 0, canvas.width, canvas.height - camera.height);\n      context.fillStyle = \"black\";\n      context.fillRect(0, canvas.height - camera.height, canvas.width, camera.height);\n      context.fillStyle = \"white\";\n      context.fillRect(0, camera.height, canvas.width, window.innerHeight);\n    } else {\n      context.fillStyle = \"black\";\n      context.fillRect(0, 0, canvas.width, canvas.height);\n    }\n  }\n\n  // handle input\n  var inputs = {};\n  document.addEventListener(\"keydown\", function(ev) {\n    inputs[ev.keyCode] = true;\n  }, false);\n  document.addEventListener(\"keyup\", function(ev) {\n    inputs[ev.keyCode] = false;\n  }, false);\n\n  // init entities\n  var entities = [];\n  for (var i = 0; i < 200; i++) {\n    var randx = Math.random() * 6 * document.body.clientWidth;\n    var randy = Math.random() * 6 * document.body.clientHeight;\n    entities.push({\n      cpos : { x : randx, y : randy },\n      ppos : { x : randx, y : randy },\n      acel : { x: 0, y : 0 }\n    });\n  }\n\n  var anim;\n  function update() {\n    anim = requestAnimationFrame(update);\n    // clear screen\n    clearBlack();\n\n    // check inputs\n    // up - w\n    if (inputs[87]) {\n      player.acel.y = -6;\n    }\n\n    // down - s\n    else if (inputs[83]) {\n      player.acel.y = 6;\n    }\n\n    // left - a\n    if (inputs[65]) {\n      player.acel.x = -6;\n    }\n\n    // right - d\n    else if (inputs[68]) {\n      player.acel.x = 6;\n    }\n\n    // shift - screen shake\n    if (inputs[16]) {\n      camera.strength = 90;\n      camera.damper = 5;\n    }\n\n    // spacebar - squash camera\n    if (inputs[32]) {\n      camera.height -= 10;\n      camera.cullDistY[0] += 10;\n      camera.cullDistY[1] -= 10;\n    }\n\n    // get the target point\n    camera.target.x = player.cpos.x - (camera.width / 2);\n    camera.target.y = player.cpos.y - (camera.height / 2);\n\n    // move camera towards target point\n    camera.acel.x += (1 / 8) * (camera.target.x - camera.cpos.x);\n    camera.acel.y += (1 / 8) * (camera.target.y - camera.cpos.y);\n\n    // player drag\n    player.ppos.x = player.cpos.x + (player.ppos.x - player.cpos.x) * 0.93;\n    player.ppos.y = player.cpos.y + (player.ppos.y - player.cpos.y) * 0.93;\n\n    // player verlet\n    player.cpos.x += player.acel.x * 0.256;\n    player.cpos.y += player.acel.y * 0.256;\n    var px = 2 * player.cpos.x - player.ppos.x;\n    var py = 2 * player.cpos.y - player.ppos.y;\n    player.ppos.x = player.cpos.x;\n    player.ppos.y = player.cpos.y;\n    player.cpos.x = px;\n    player.cpos.y = py;\n    player.acel.x = 0;\n    player.acel.y = 0;\n\n    // camera shake update\n    if (camera.strength > 0) {\n      var randx = Math.random() * 2 * camera.strength - camera.strength;\n      var randy = Math.random() * 2 * camera.strength - camera.strength;\n      camera.acel.x += randx;\n      camera.acel.y += randy;\n      camera.strength -= camera.damper;\n    }\n\n    // camera drag\n    camera.ppos.x = camera.cpos.x + (camera.ppos.x - camera.cpos.x) * 0.3;\n    camera.ppos.y = camera.cpos.y + (camera.ppos.y - camera.cpos.y) * 0.3;\n\n    // camera verlet\n    camera.cpos.x += camera.acel.x * 0.256;\n    camera.cpos.y += camera.acel.y * 0.256;\n    var cx = 2 * camera.cpos.x - camera.ppos.x;\n    var cy = 2 * camera.cpos.y - camera.ppos.y;\n    camera.ppos.x = camera.cpos.x;\n    camera.ppos.y = camera.cpos.y;\n    camera.cpos.x = cx;\n    camera.cpos.y = cy;\n    camera.acel.x = 0;\n    camera.acel.y = 0;\n\n    // bind camera to world edges\n    if (camera.bound) {\n\n      // flush camera -- x bounds\n      camera.cpos.x = Math.min(camera.cpos.x, camera.maxWidth - camera.width);\n      camera.cpos.x = Math.max(camera.cpos.x, 0);\n\n      // flush camera -- y bounds\n      camera.cpos.y = Math.min(camera.cpos.y, camera.maxHeight - camera.height);\n      camera.cpos.y = Math.max(camera.cpos.y, 0);\n    }\n\n    // draw player with corrected positions\n    var playerX = player.cpos.x - camera.cpos.x;\n    var playerY = player.cpos.y - camera.cpos.y;\n    context.beginPath();\n    context.fillStyle = \"white\";\n    context.fillRect(playerX, playerY, 10, 10);\n    //Player.render(playerY, playerY)\n\n    // draw entities with corrected positions\n    for (var i = 0; i < entities.length; i++) {\n      var entity = entities[i];\n      var entityX = entity.cpos.x - camera.cpos.x;\n      var entityY = entity.cpos.y - camera.cpos.y;\n      if ((entityX >= camera.cullDistX[0] && entityX <= camera.cullDistX[1]) &&\n          (entityY >= camera.cullDistY[0] && entityY <= camera.cullDistY[1]) ) {\n        context.beginPath();\n        context.fillStyle=\"gold\";\n        context.arc(entityX,entityY, 10, 0, 2*Math.PI, false);\n        context.fill();\n      }\n    }\n  }\n\n  // start everything and handle stopping\n  anim = requestAnimationFrame(update);\n  document.addEventListener(\"keydown\", function(ev) {\n    if (ev.keyCode === 27) {\n      cancelAnimationFrame(anim);\n    }\n  });\n});\n\n//\n//   // start everything and handle stopping\n//   anim = requestAnimationFrame(update);\n//   document.addEventListener(\"keydown\", function(ev) {\n//     if (ev.keyCode === 27) {\n//       cancelAnimationFrame(anim);\n//     }\n//   });\n// });\n// // camera object\n// // var camera = {\n// //   cpos : { x : 0, y : 0 },\n// //   ppos : { x : 0, y : 0 },\n// //   acel : { x : 0, y : 0 },\n// //   height : document.body.clientHeight,\n// //   width  : document.body.clientWidth,\n// //   maxHeight : 6 * document.body.clientHeight,\n// //   maxWidth  : 6 * document.body.clientWidth,\n// //   cullDist : 300,\n// //   bound : true,\n// //   target : { x : 0, y : 0 },\n// //   strength : 0,\n// //   damper : 0\n// // };\n// //\n// // // player object\n// // var player = {\n// //   cpos : { x : 0, y : 0 },\n// //   ppos : { x : 0, y : 0 },\n// //   acel : { x : 0, y : 0 }\n// // };\n//\n// // handle input\n// var inputs = {};\n// document.addEventListener(\"keydown\", function(ev) {\n//   inputs[ev.keyCode] = true;\n// }, false);\n// document.addEventListener(\"keyup\", function(ev) {\n//   inputs[ev.keyCode] = false;\n// }, false);\n//\n// // init entities\n// var entities = [];\n// for (var i = 0; i < 200; i++) {\n//   var randx = Math.random() * 6 * document.body.clientWidth;\n//   var randy = Math.random() * 6 * document.body.clientHeight;\n//   entities.push({\n//     cpos : { x : randx, y : randy },\n//     ppos : { x : randx, y : randy },\n//     acel : { x: 0, y : 0 }\n//   });\n// }\n//\n// // // canvas stuff\n// // var canvas = document.getElementById(\"canvas\");\n// // // canvas.width = document.body.clientWidth;\n// // // canvas.height = document.body.clientHeight;\n// // canvas.width = 900;\n// // canvas.height = 900;\n// // var context = canvas.getContext('2d');\n// //\n// // function clearBlack() {\n// //   context.beginPath();\n// //   context.fillStyle = \"black\";\n// //   context.fillRect(0, 0, canvas.width, canvas.height);\n// // }\n// var anim;\n// function update() {\n//   anim = requestAnimationFrame(update);\n//   // clear screen\n//   clearBlack();\n//\n//   // check inputs\n//   // up - w\n//   if (inputs[87]) {\n//     player.acel.y = -6;\n//   }\n//\n//   // down - s\n//   else if (inputs[83]) {\n//     player.acel.y = 6;\n//   }\n//\n//   // left - a\n//   if (inputs[65]) {\n//     player.acel.x = -6;\n//   }\n//\n//   // right - d\n//   else if (inputs[68]) {\n//     player.acel.x = 6;\n//   }\n//\n//   // shift - screen shake\n//   if (inputs[16]) {\n//     camera.strength = 90;\n//     camera.damper = 5;\n//   }\n//\n//   // get the target point\n//   camera.target.x = player.cpos.x - (camera.width / 2);\n//   camera.target.y = player.cpos.y - (camera.height / 2);\n//\n//   // move camera towards target point\n//   camera.acel.x += (1 / 8) * (camera.target.x - camera.cpos.x);\n//   camera.acel.y += (1 / 8) * (camera.target.y - camera.cpos.y);\n//\n//   // player drag\n//   player.ppos.x = player.cpos.x + (player.ppos.x - player.cpos.x) * 0.93;\n//   player.ppos.y = player.cpos.y + (player.ppos.y - player.cpos.y) * 0.93;\n//\n//   // player verlet\n//   player.cpos.x += player.acel.x * 0.256;\n//   player.cpos.y += player.acel.y * 0.256;\n//   var px = 2 * player.cpos.x - player.ppos.x;\n//   var py = 2 * player.cpos.y - player.ppos.y;\n//   player.ppos.x = player.cpos.x;\n//   player.ppos.y = player.cpos.y;\n//   player.cpos.x = px;\n//   player.cpos.y = py;\n//   player.acel.x = 0;\n//   player.acel.y = 0;\n//\n//   // camera shake update\n//   if (camera.strength > 0) {\n//     var randx = Math.random() * 2 * camera.strength - camera.strength;\n//     var randy = Math.random() * 2 * camera.strength - camera.strength;\n//     camera.acel.x += randx;\n//     camera.acel.y += randy;\n//     camera.strength -= camera.damper;\n//   }\n//\n//   // camera drag\n//   camera.ppos.x = camera.cpos.x + (camera.ppos.x - camera.cpos.x) * 0.3;\n//   camera.ppos.y = camera.cpos.y + (camera.ppos.y - camera.cpos.y) * 0.3;\n//\n//   // camera verlet\n//   camera.cpos.x += camera.acel.x * 0.256;\n//   camera.cpos.y += camera.acel.y * 0.256;\n//   var cx = 2 * camera.cpos.x - camera.ppos.x;\n//   var cy = 2 * camera.cpos.y - camera.ppos.y;\n//   camera.ppos.x = camera.cpos.x;\n//   camera.ppos.y = camera.cpos.y;\n//   camera.cpos.x = cx;\n//   camera.cpos.y = cy;\n//   camera.acel.x = 0;\n//   camera.acel.y = 0;\n//\n//   // bind camera to world edges\n//   if (camera.bound) {\n//\n//     // flush camera -- x bounds\n//     camera.cpos.x = Math.min(camera.cpos.x, camera.maxWidth - camera.width);\n//     camera.cpos.x = Math.max(camera.cpos.x, 0);\n//\n//     // flush camera -- y bounds\n//     camera.cpos.y = Math.min(camera.cpos.y, camera.maxHeight - camera.height);\n//     camera.cpos.y = Math.max(camera.cpos.y, 0);\n//   }\n//\n//   // draw player with corrected positions\n//   var playerx = player.cpos.x - camera.cpos.x;\n//   var playery = player.cpos.y - camera.cpos.y;\n//   context.beginPath();\n//   context.fillStyle = \"white\";\n//   context.fillRect(playerx, playery, 10, 10);\n//\n//   // draw entities with corrected positions\n//   for (var i = 0; i < entities.length; i++) {\n//     var entity = entities[i];\n//     var ex = entity.cpos.x - camera.cpos.x;\n//     var ey = entity.cpos.y - camera.cpos.y;\n//     if ((ex >= -camera.cullDist && ex <= camera.width + camera.cullDist) &&\n//         (ey >= -camera.cullDist && ex <= camera.height + camera.cullDist) ) {\n//       context.beginPath();\n//       context.fillStyle=\"gold\";\n//       context.arc(ex,ey, 10, 0, 2*Math.PI, false);\n//       context.fill();\n//     }\n//   }\n// }\n//\n//\n// // start everything and handle stopping\n// anim = requestAnimationFrame(update);\n// document.addEventListener(\"keydown\", function(ev) {\n//   if (ev.keyCode === 27) {\n//     cancelAnimationFrame(anim);\n//   }\n// });\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/cordycepsGame.js\n ** module id = 0\n ** module chunks = 0\n **/","var Player = function () {\n  this.cpos = { x: 0, y: 0 };\n  this.ppos = { x: 0, y: 0 };\n  this.acel = { x: 0, y: 0 };\n};\n\nPlayer.render = function (xPos, yPos) {\n\n};\n\nmodule.exports = Player;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/player.js\n ** module id = 1\n ** module chunks = 0\n **/","var Camera = function (height, width) {\n  this.cpos = { x: 0, y: 0 }; // top left corner of camera object\n  this.ppos = { x: 0, y: 0 }; // location of player object\n  this.acel = { x: 0, y: 0 }; // acceleration of camera object\n  this.height = height;\n  this.width  = width;\n  this.maxHeight = 6 * height;\n  this.maxWidth = 6 * width;\n  this.cullDistX = [0, width];  // \"cull\" distance. or, objects this far away from cam not rendered\n  this.cullDistY = [0, height];\n  this.bound = true;\n  this.target = { x: 0, y: 0 };\n  this.strength = 0;\n  this.damper = 0;\n};\n\nCamera.prototype.squashCamera = function() {\n\n};\n\nfunction moveCamera(playerCPosX, playerCPosY) {\n  // get the target point\n  camera.target.x = player.cpos.x - (camera.width / 2);\n  camera.target.y = player.cpos.y - (camera.height / 2);\n\n  // move camera towards target point\n  camera.acel.x += (1 / 8) * (camera.target.x - camera.cpos.x);\n  camera.acel.y += (1 / 8) * (camera.target.y - camera.cpos.y);\n\n  // camera shake update\n  if (camera.strength > 0) {\n    var randx = Math.random() * 2 * camera.strength - camera.strength;\n    var randy = Math.random() * 2 * camera.strength - camera.strength;\n    camera.acel.x += randx;\n    camera.acel.y += randy;\n    camera.strength -= camera.damper;\n  }\n\n  // camera drag\n  camera.ppos.x = camera.cpos.x + (camera.ppos.x - camera.cpos.x) * 0.3;\n  camera.ppos.y = camera.cpos.y + (camera.ppos.y - camera.cpos.y) * 0.3;\n\n  // camera verlet\n  camera.cpos.x += camera.acel.x * 0.256;\n  camera.cpos.y += camera.acel.y * 0.256;\n  var cx = 2 * camera.cpos.x - camera.ppos.x;\n  var cy = 2 * camera.cpos.y - camera.ppos.y;\n  camera.ppos.x = camera.cpos.x;\n  camera.ppos.y = camera.cpos.y;\n  camera.cpos.x = cx;\n  camera.cpos.y = cy;\n  camera.acel.x = 0;\n  camera.acel.y = 0;\n\n  // bind camera to world edges\n  if (camera.bound) {\n\n    // flush camera -- x bounds\n    camera.cpos.x = Math.min(camera.cpos.x, camera.maxWidth - camera.width);\n    camera.cpos.x = Math.max(camera.cpos.x, 0);\n\n    // flush camera -- y bounds\n    camera.cpos.y = Math.min(camera.cpos.y, camera.maxHeight - camera.height);\n    camera.cpos.y = Math.max(camera.cpos.y, 0);\n  }\n}\n\nmodule.exports = Camera;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/camera.js\n ** module id = 2\n ** module chunks = 0\n **/"],"sourceRoot":""}